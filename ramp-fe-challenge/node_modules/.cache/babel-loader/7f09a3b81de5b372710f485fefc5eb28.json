{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ianta\\\\Downloads\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\components\\\\Transactions\\\\TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { data } from \"../../utils/requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n\n  const setTransactionApproval = (transactionId, value) => {\n    const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n    if (!transaction) {\n      throw new Error(\"Invalid transaction to approve\");\n    }\n\n    transaction.approved = value;\n    console.log(\"transPane \" + transactionId);\n    console.log(\"transPane approved \" + transaction.approved);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: async newValue => {\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n        console.log(newValue); // console.log(mockdata.transactions[1].approved = true)\n        // console.log(setApproved(newValue))\n        // console.log(transaction.id)\n\n        setTransactionApproval(transaction.id, newValue);\n        setApproved(newValue);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"KPAjtgwy0mvFAelnTZhq541SWIA=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","data","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","transactionId","value","transactions","find","currentTransaction","id","Error","console","log","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","newValue","Intl","NumberFormat","style","currency"],"sources":["C:/Users/ianta/Downloads/ramp-fe-challenge/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\nimport mockdata from \"../../mock-data.json\"\nimport {setTransactionApproval, data} from \"../../utils/requests\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved)\n\n  const setTransactionApproval = ( transactionId: string, value: boolean )  => {\n    const transaction = data.transactions.find(\n      (currentTransaction) => currentTransaction.id === transactionId\n    )\n    if (!transaction) {\n      throw new Error(\"Invalid transaction to approve\")\n    }\n    transaction.approved = value\n    console.log(\"transPane \" + (transactionId))\n    console.log(\"transPane approved \" + (transaction.approved))\n  }\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={async (newValue) => {\n          await consumerSetTransactionApproval({\n            transactionId: transaction.id,\n            newValue,\n          })\n          console.log(newValue)\n          // console.log(mockdata.transactions[1].approved = true)\n          // console.log(setApproved(newValue))\n          // console.log(transaction.id)\n\n          setTransactionApproval(transaction.id, newValue);\n          setApproved(newValue)\n        }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAGA,SAAgCC,IAAhC,QAA2C,sBAA3C;;AAEA,OAAO,MAAMC,eAAyC,GAAG,QAInD;EAAA;;EAAA,IAJoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC,sBAAsB,EAAEC;EAHgC,CAIpD;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACI,WAAW,CAACI,QAAb,CAAxC;;EAEA,MAAMF,sBAAsB,GAAG,CAAEI,aAAF,EAAyBC,KAAzB,KAA8C;IAC3E,MAAMP,WAAW,GAAGF,IAAI,CAACU,YAAL,CAAkBC,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACC,EAAnB,KAA0BL,aADhC,CAApB;;IAGA,IAAI,CAACN,WAAL,EAAkB;MAChB,MAAM,IAAIY,KAAJ,CAAU,gCAAV,CAAN;IACD;;IACDZ,WAAW,CAACI,QAAZ,GAAuBG,KAAvB;IACAM,OAAO,CAACC,GAAR,CAAY,eAAgBR,aAA5B;IACAO,OAAO,CAACC,GAAR,CAAY,wBAAyBd,WAAW,CAACI,QAAjD;EACD,CAVD;;EAYA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBJ,WAAW,CAACe,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBjB,WAAW,CAACkB,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGlB,WAAW,CAACmB,QAAZ,CAAqBC,SADxB,OACoCpB,WAAW,CAACmB,QAAZ,CAAqBE,QADzD,SACsErB,WAAW,CAACsB,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEtB,WAAW,CAACW,EADlB;MAEE,OAAO,EAAEP,QAFX;MAGE,QAAQ,EAAEH,OAHZ;MAIE,QAAQ,EAAE,MAAOsB,QAAP,IAAoB;QAC5B,MAAMpB,8BAA8B,CAAC;UACnCG,aAAa,EAAEN,WAAW,CAACW,EADQ;UAEnCY;QAFmC,CAAD,CAApC;QAIAV,OAAO,CAACC,GAAR,CAAYS,QAAZ,EAL4B,CAM5B;QACA;QACA;;QAEArB,sBAAsB,CAACF,WAAW,CAACW,EAAb,EAAiBY,QAAjB,CAAtB;QACAlB,WAAW,CAACkB,QAAD,CAAX;MACD;IAhBH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CAhDM;;GAAMxB,e;;KAAAA,e;AAkDb,MAAMiB,cAAc,GAAG,IAAIQ,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}